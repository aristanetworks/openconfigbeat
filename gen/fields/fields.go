// Code generated by go-bindata.
// sources:
// fields.yml
// DO NOT EDIT!

package fields

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fieldsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x6f\x1b\x37\x10\xbe\xeb\x57\x0c\x72\xb6\x16\x8d\x8d\xe4\xa0\x43\xd1\xd4\x29\x0a\xa3\x48\x5b\x14\xe9\xa9\x28\x94\x11\x39\x5a\xb1\xde\x25\x37\x9c\x59\xdb\xea\xaf\x2f\xf8\xd8\x97\xb5\x7a\xb8\x75\x73\x08\x4c\x72\xf8\x7d\x1f\x87\xf3\xe0\x6a\xb1\x84\x7b\xda\xaf\x60\x43\x28\x0b\x00\x31\x52\xd1\x0a\xbe\x4f\x23\x4d\xac\xbc\x69\xc4\x38\xbb\x82\x6f\x17\x00\x00\xb7\xce\x0a\x1a\xcb\xa0\x5c\x5d\x3b\x1b\xf7\xc1\xd6\x50\xa5\x19\xf0\x01\x4d\x85\x9b\x8a\xc0\x58\xc0\xaa\x02\x7a\x20\x2b\x20\xfb\x86\xb8\x58\x40\x36\x5b\x2d\x22\xd0\x12\x2c\xd6\x94\x88\x8b\xf0\x67\x9c\x9d\xe5\x0c\xff\x3e\xef\x28\x6e\x00\xb7\x05\xd9\x51\x54\x08\x4c\x56\x1b\x5b\xc6\x89\xca\x95\x50\x13\x33\x96\xc4\x05\xdc\x8d\xac\xe2\x36\xc3\x3d\x14\x93\x04\x81\x61\x5d\x39\xbb\x35\x65\xeb\x31\xd0\xc1\xd6\x54\x74\x15\xe6\xc3\x22\x0a\x3c\x60\xd5\x86\x9d\xd0\x32\xe9\x88\x69\x24\x0c\xad\x93\x31\x58\xdc\x02\x3b\xc7\x92\x99\xb2\xfd\x67\x17\xa9\x26\x3a\xae\xc2\x5a\x9c\xfa\x12\x86\x5f\x7a\x1c\x17\x4f\x7c\x5c\x57\x71\xe8\xb4\x8e\xf1\xbc\xe3\x7a\x6d\xc8\xe0\x49\x5a\x6f\x49\xc3\x66\x1f\xa9\x5c\x43\x81\xc6\x96\xc0\x7b\x16\xaa\xc1\x59\x78\xdc\x19\xb5\x1b\x84\x8f\x7c\xe7\x5b\x6b\x8d\x2d\x67\xd4\x88\xa9\xe9\x6f\x67\x2f\x50\xd3\x59\xfe\x9f\x6a\x1e\xc8\xb3\x71\xf6\xbc\x98\x6c\xd8\x85\x55\x0c\xe7\x78\xf9\x25\xd9\x20\x85\x34\xc8\xce\x70\x0a\xe5\x62\x1a\xba\x6f\xbe\x0b\x47\x61\xc1\xba\x79\x93\x41\x43\xac\xaf\x40\xa3\x74\x7e\xf0\xf4\xb5\x35\x9e\xf4\x0a\xc4\xb7\xdd\xe4\xd6\xf9\x1a\x65\x62\x47\x4f\x58\x37\x21\xf5\x3e\xb4\x65\xcb\x02\xd7\xef\x65\x07\xd7\xdf\xbc\x7d\x7f\x05\x6f\xaf\x57\x37\xef\x56\xef\x6e\x8a\x9b\x9b\xeb\xcb\xbc\x1b\x25\xc1\x63\x0a\x64\xca\x69\x18\x12\xc4\x93\x72\x5e\xc3\x23\xf2\x70\xbe\x67\x87\x12\x2c\xf9\x34\xcb\x07\xbf\x31\xe2\xd1\xef\xa3\x6d\xf2\x96\xc2\x50\x0a\x62\xbc\x37\xe4\xd3\x45\xa1\xd5\x71\x20\x1e\x2d\xa3\x92\xe1\x3e\x92\x9f\x9e\x11\xa7\xea\x30\xf1\xa3\xdb\xfc\x45\xaa\xcb\xb5\x34\x58\xa7\x95\x7b\xda\x3f\x3a\xaf\x4f\x0b\xed\x6b\x55\xcb\xe4\x87\x9c\x0a\x05\x2a\x91\x3d\x53\x40\xde\x3b\x3f\x11\x50\x7a\xd7\x36\xa7\x49\x7e\x08\x9b\xba\x0a\xa8\x12\x63\x88\x5f\xd4\xda\x04\x5b\xac\xc0\xd8\xad\x0b\x99\xad\x90\x63\xfd\x8a\x3c\x5c\x74\xc1\x90\xab\x62\x07\xd8\xa9\xc9\xc5\xac\x9f\xef\x34\x09\x3d\xc9\x68\xf2\x88\xac\x41\x5a\xc6\x29\x0e\x08\x94\xd3\x87\xe8\x95\xb3\xe5\x4b\xd0\x03\xc8\x21\x74\xc0\x3a\x80\x9e\xde\xd9\x45\xe8\x29\x4c\x72\x8b\x52\x95\x6b\xf5\xd0\xa3\x6e\xc3\x10\x1a\xef\x1e\x8c\xa6\x70\x4c\x41\x8d\x82\xf3\x6d\xeb\x53\x5e\x85\xad\x77\x75\x42\xea\xb7\x72\xb8\xab\xa1\x04\xa1\xd6\xeb\x68\xb0\xee\x20\x83\xa5\x22\x66\xe7\x8f\x76\xb1\x60\x5a\xc4\x5d\x45\x07\xfb\x3c\xb1\x49\x9d\xc9\xde\x9f\x47\xed\x6d\xaa\xb0\x80\x5f\x1d\xb3\x09\x81\x1b\x7b\x12\x03\x7a\x0a\x80\x57\x50\x2a\xba\x02\xe7\x41\x9b\xd2\x08\x56\x4e\x11\xda\xe2\xa8\x36\x63\x59\xd0\x2a\x5a\x9b\x33\xa9\x73\x97\x0d\xe1\xee\x63\x27\x29\x34\x11\xa8\x51\xed\x8c\x7d\x9e\xba\x73\x0c\xe7\x3b\x53\xcf\x31\xee\xeb\x97\xb1\x64\x83\xf5\x28\xce\x7a\x3f\xcb\x75\x51\x93\x36\x6d\x7d\x9a\xfd\x53\x82\x88\x21\xf6\x32\xf2\xfc\xcc\x31\x95\x91\xfd\x7a\xd4\xf2\x7a\x05\x2d\x2f\x09\x59\x96\x6f\xd5\x99\x42\x3a\x02\x82\xd8\x11\xcd\xd0\xed\x0c\x27\x39\x86\x87\x36\x77\x22\xe4\x62\x6d\xec\x6f\xb5\x97\x92\x57\x96\x4f\x97\x87\x5e\xde\x12\xb4\xfc\xe8\x5c\x59\x51\xca\xb4\xe3\xec\x9e\xca\xb3\xad\xf6\xb7\x68\x73\xee\x7c\x39\xd1\xb5\x53\xf7\x31\x7f\x72\xa6\x7f\xec\xc6\x33\xe0\x1b\x12\xfc\xe3\xcf\xa4\x2d\xd9\x01\x0b\x4a\x28\xc5\x55\x45\x2a\xf4\xef\x98\xf2\x69\x2d\xe4\x2f\xef\x9c\x97\x75\xea\x06\x2b\xd8\x62\xc5\xe1\x02\xd1\xaa\x9d\xf3\x1d\xf7\xb2\xcf\xf8\xc5\xb4\x40\x77\xc7\xef\x25\xc2\x6c\xaf\x38\x56\xd3\x73\x7f\x20\x5f\x18\xfd\xdf\xea\xe3\xef\xd6\x7c\x6d\x69\x00\x04\xa3\xe7\x2a\x7c\x4f\x57\xcf\xb5\x92\x17\x31\x8e\x63\x24\xc2\x75\x2f\xd5\x2c\x20\x3c\x2a\x36\xad\xa9\x04\x9c\x3d\x25\x65\x54\x18\xfe\xa5\x92\xdb\x9e\x33\x60\x9d\xe2\xaa\x70\x43\x15\x1f\xb0\x4d\xde\x15\x70\xfa\x6d\x71\x46\xcb\x5d\xf4\x44\xe2\xe9\x03\xf8\xbe\xdd\x90\xb7\x24\xc4\x43\x10\xff\x34\x9e\x3b\x13\xc8\x83\x6d\xdf\xd6\xa6\x3d\x6a\x20\x80\x71\xa4\x9e\x0e\xed\x61\xd3\xd9\xf0\x9e\x1c\xe0\x65\x21\xde\x38\xfd\x0a\x57\x3c\xf2\x40\xe3\x74\x84\x5e\x1c\x50\x85\xff\xb9\x41\xf5\x7a\x5c\x03\xe2\x01\xd9\xa5\xa1\x74\x19\x51\x42\x83\x1a\x9b\x43\x26\xb4\xd6\x49\xfc\xf2\x7b\x35\xba\x11\xe4\x3c\xe7\x6b\xa6\xe7\x88\x57\x4d\x32\xf5\x14\xed\x2b\x14\xa8\x59\xde\x84\x9b\xf3\xd2\x35\x64\x53\x76\x4c\x7f\xee\xf8\xa5\x21\x7b\x1b\xe7\x81\xc5\x13\xd6\xe1\x01\xef\x89\x1b\x67\x63\x06\x5d\xf0\x3b\xc8\x0b\x7f\x02\x49\x4e\x38\xcc\xaa\xe1\x13\x76\x26\xcd\x66\x5e\xd7\xb3\x9f\x97\xa7\xbe\x0e\xf3\x6b\x27\x7e\x24\x2f\xfe\x09\x00\x00\xff\xff\x00\x56\x5f\xe8\xfd\x11\x00\x00")

func fieldsYmlBytes() ([]byte, error) {
	return bindataRead(
		_fieldsYml,
		"fields.yml",
	)
}

func fieldsYml() (*asset, error) {
	bytes, err := fieldsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fields.yml", size: 4605, mode: os.FileMode(420), modTime: time.Unix(1517338430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fields.yml": fieldsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fields.yml": &bintree{fieldsYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
